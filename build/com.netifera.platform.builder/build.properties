# Refer to the following template file for more details about these options and others
#
#   ${basebuilder}/plugins/org.eclipse.pde.build/templates/headless-build/build.properties


topLevelElementType = feature
topLevelElementId = com.netifera.platform.ui.product

testPlugin=org.eclipse.test_3.2.0
junitPlugin=org.junit4_4.3.1

individualSourceBundles=true
#
#  ${basedir}
#       |
#       +------/com.netifera.platform.builder/  (build configuration files such as this one) 
#       |
#       +------/org.eclipse.releng.basebuilder/ (The basebuilder is the build engine [see notes below])
#       |
#       +------/target                          (This is where the 'target' plugins are [see notes below])
#       |
#       +------/stage                           (sources are checked out and build takes place here)
#       |
#       +------/test                            (zardoz build unpacked here and tests are run)
#       |
#       +------build.xml                        (master build file)
#
buildDirectory=${basedir}/build/stage
testDirectory=${basedir}/build/test
product=${buildDirectory}/features/com.netifera.platform.ui.product/netifera.product


#
# $ cvs -d :pserver:anonymous@dev.eclipse.org:/cvsroot/eclipse co -r RC2_34 org.eclipse.releng.basebuilder
#
basebuilder=${basedir}/org.eclipse.releng.basebuilder

#
# target containing contents of the following archives
#
# eclipse-RCP-SDK-3.4.1 and eclipse-3.4.1-delta-pack (see ant/target-setup.xml)
#
base=${basedir}/build/target
baseLocation=${base}/eclipse

#
# Additional plugins not in the RCP SDK
#
pluginPath=${basedir}/platform/com.netifera.platform.target/plugins

#Os/Ws/Arch/nl of the eclipse specified by baseLocation
baseos=linux
basews=gtk
basearch=x86

runPackager=true

# The prefix that will be used in the generated archive.
archivePrefix=netifera

# The location underwhich all of the build output will be collected.
collectingFolder=${archivePrefix}

configs = linux,gtk,x86 & macosx,carbon,x86 & win32,win32,x86

#archivesFormat=win32,win32,x86 - antZip & linux,gtk,x86 - tar

# letter "I, N, S, R or M" used to identify builds as being one of the following:
# I - Integration
# N - Nightly
# S - Stable
# R - Release
# M - Maintenance
buildType=I
buildId=NetiferaBuild
# refers to the name of the directory which will contain the end result of the build
buildLabel=${buildType}.${buildId}

# random default in case not set by command line
timestamp=007

#Enable / disable the generation of a suffix for the features that use .qualifier. 
#The generated suffix is computed according to the content of the feature   
#generateFeatureVersionSuffix=true

#forceQualifier=${timestamp}

#this property indicates whether you want the set of plug-ins and features to be considered during the build to be limited to the ones reachable from the features / plugins being built
filteredDependencyCheck=false

#this property indicates whether the resolution should be done in development mode (i.e. ignore multiple bundles with singletons)
resolution.devMode=false


skipBase=true
skipMaps=true
skipFetch=true

# Specify the output format of the compiler log when eclipse jdt is used
logExtension=.log

# Whether or not to include debug info in the output jars
javacDebugInfo=false 

# Whether or not to fail the build if there are compiler errors
javacFailOnError=true

# Enable or disable verbose mode of the compiler
javacVerbose=true

# Extra arguments for the compiler. These are specific to the java compiler being used.
#compilerArg=

# Default value for the version of the source code. This value is used when compiling plug-ins that do not set the Bundle-RequiredExecutionEnvironment or set javacSource in build.properties
javacSource=1.5

# Default value for the version of the byte code targeted. This value is used when compiling plug-ins that do not set the Bundle-RequiredExecutionEnvironment or set javacTarget in build.properties.
javacTarget=1.5


